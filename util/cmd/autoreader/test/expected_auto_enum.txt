/************************************
 *
 * This file contains auto-generated methods to help configure enums.
 * It was generated by autoreader.
 *
 * DO NOT EDIT by hand.
 *
 ************************************/

package examplepkg

import (
	"github.com/jkomoros/boardgame/enum"
)

var Enums = enum.NewSet()

//ConfigureEnums simply returns Enums, the auto-generated Enums variable. This
//is output because gameDelegate appears to be a struct that implements
//boardgame.GameDelegate, and does not already have a ConfigureEnums
//explicitly defined.
func (g *gameDelegate) ConfigureEnums() *enum.Set {
	return Enums
}

//ConfigureEnums simply returns Enums, the auto-generated Enums variable. This
//is output because secondGameDelegate appears to be a struct that implements
//boardgame.GameDelegate, and does not already have a ConfigureEnums
//explicitly defined.
func (s *secondGameDelegate) ConfigureEnums() *enum.Set {
	return Enums
}

var ColorEnum = Enums.MustAdd("Color", map[int]string{
	ColorBlue:    "Blue",
	ColorGreen:   "Green",
	ColorRed:     "Red",
	ColorUnknown: "Unknown",
})

var PhaseEnum = Enums.MustAdd("Phase", map[int]string{
	PhaseMultiWord:    "Multi Word",
	PhaseUnknown:      "Unknown",
	PhaseVeryLongName: "Very Long Name",
})

var FooEnum = Enums.MustAdd("Foo", map[int]string{
	FooBlue:           "Blue",
	FooOverride:       "Green",
	FooOverrideBlank:  "",
	FooOverrideQuoted: "My name is \"Blue\"",
})

var TransformExampleEnum = Enums.MustAdd("TransformExample", map[int]string{
	TransformExampleLowerCase:                 "lower case",
	TransformExampleNormalConfiguredTransform: "Normal Configured Transform",
	TransformExampleNormalTransform:           "Normal Transform",
	TransformExampleUpperCase:                 "UPPER CASE",
})

var DefaultTransformEnum = Enums.MustAdd("DefaultTransform", map[int]string{
	DefaultTransformBlue:  "BLUE",
	DefaultTransformGreen: "GREEN",
	DefaultTransformRed:   "Red",
})

var TreeEnum = Enums.MustAddTree("Tree", map[int]string{
	Tree:      "",
	TreeBlue:  "Blue",
	TreeGreen: "Green",
	TreeRed:   "Red",
}, map[int]int{
	Tree:      Tree,
	TreeBlue:  Tree,
	TreeGreen: Tree,
	TreeRed:   Tree,
})

var BlamEnum = Enums.MustAddTree("Blam", map[int]string{
	Blam:        "",
	BlamOne:     "One",
	BlamOne_One: "One",
	BlamOne_Two: "Two",
	BlamThree:   "Three",
	BlamTwo:     "Two",
	BlamTwo_One: "One",
}, map[int]int{
	Blam:        Blam,
	BlamOne:     Blam,
	BlamOne_One: BlamOne,
	BlamOne_Two: BlamOne,
	BlamThree:   Blam,
	BlamTwo:     Blam,
	BlamTwo_One: BlamTwo,
})

var ExampleEnum = Enums.MustAddTree("Example", map[int]string{
	Example:        "",
	ExampleOne:     "One",
	ExampleOneOne:  "One",
	ExampleOne_Two: "Two",
	ExampleTwo:     "Two",
}, map[int]int{
	Example:        Example,
	ExampleOne:     Example,
	ExampleOneOne:  ExampleOne,
	ExampleOne_Two: ExampleOne,
	ExampleTwo:     Example,
})

//Implicitly created constants for MultiWordTree
const (
	MultiWordTreeBlueGreenOne = iota - 9223372036854775808
	MultiWordTreeBlueGreenThree
)

var MultiWordTreeEnum = Enums.MustAddTree("MultiWordTree", map[int]string{
	MultiWordTree:                 "",
	MultiWordTreeBlueGreen:        "Blue Green",
	MultiWordTreeBlueGreenOne:     "One",
	MultiWordTreeBlueGreenOneA:    "A",
	MultiWordTreeBlueGreenOneB:    "B",
	MultiWordTreeBlueGreenThree:   "Three",
	MultiWordTreeBlueGreenThree_A: "A",
	MultiWordTreeBlueGreenTwoA:    "Two A",
}, map[int]int{
	MultiWordTree:                 MultiWordTree,
	MultiWordTreeBlueGreen:        MultiWordTree,
	MultiWordTreeBlueGreenOne:     MultiWordTreeBlueGreen,
	MultiWordTreeBlueGreenOneA:    MultiWordTreeBlueGreenOne,
	MultiWordTreeBlueGreenOneB:    MultiWordTreeBlueGreenOne,
	MultiWordTreeBlueGreenThree:   MultiWordTreeBlueGreen,
	MultiWordTreeBlueGreenThree_A: MultiWordTreeBlueGreenThree,
	MultiWordTreeBlueGreenTwoA:    MultiWordTreeBlueGreen,
})

//Implicitly created constants for SkipNode
const (
	SkipNodeRed = iota - 9223372036854775808
)

var SkipNodeEnum = Enums.MustAddTree("SkipNode", map[int]string{
	SkipNode:           "",
	SkipNodeRed:        "Red",
	SkipNodeRed_Circle: "Circle",
}, map[int]int{
	SkipNode:           SkipNode,
	SkipNodeRed:        SkipNode,
	SkipNodeRed_Circle: SkipNodeRed,
})
