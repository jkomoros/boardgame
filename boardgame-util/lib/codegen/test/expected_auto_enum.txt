/************************************
 *
 * This file contains auto-generated methods to help configure enums.
 * It was generated by the codegen package via 'boardgame-util codegen'.
 *
 * DO NOT EDIT by hand.
 *
 ************************************/

package examplepkg

import (
	"github.com/jkomoros/boardgame"
	"github.com/jkomoros/boardgame/enum"
)

var enums = enum.NewSet()

//ConfigureEnums simply returns enums, the auto-generated Enums variable. This
//is output because gameDelegate appears to be a struct that implements
//boardgame.GameDelegate, and does not already have a ConfigureEnums
//explicitly defined.
func (g *gameDelegate) ConfigureEnums() *enum.Set {
	return enums
}

//ConfigureEnums simply returns enums, the auto-generated Enums variable. This
//is output because secondGameDelegate appears to be a struct that implements
//boardgame.GameDelegate, and does not already have a ConfigureEnums
//explicitly defined.
func (s *secondGameDelegate) ConfigureEnums() *enum.Set {
	return enums
}

//colorEnum is the enum.Enum for color
var colorEnum = enums.MustAdd("color", map[int]string{
	colorBlue:    "Blue",
	colorGreen:   "Green",
	colorRed:     "Red",
	colorUnknown: "Unknown",
})

//phaseEnum is the enum.Enum for phase
var phaseEnum = enums.MustAdd("phase", map[int]string{
	phaseMultiWord:    "Multi Word",
	phaseUnknown:      "Unknown",
	phaseVeryLongName: "Very Long Name",
})

//fooEnum is the enum.Enum for foo
var fooEnum = enums.MustAdd("foo", map[int]string{
	fooBlue:           "Blue",
	fooOverride:       "Green",
	fooOverrideBlank:  "",
	fooOverrideQuoted: "My name is \"Blue\"",
})

//transformExampleEnum is the enum.Enum for transformExample
var transformExampleEnum = enums.MustAdd("transformExample", map[int]string{
	transformExampleLowerCase:                 "lower case",
	transformExampleNormalConfiguredTransform: "Normal Configured Transform",
	transformExampleNormalTransform:           "Normal Transform",
	transformExampleUpperCase:                 "UPPER CASE",
})

//defaultTransformEnum is the enum.Enum for defaultTransform
var defaultTransformEnum = enums.MustAdd("defaultTransform", map[int]string{
	defaultTransformBlue:  "BLUE",
	defaultTransformGreen: "GREEN",
	defaultTransformRed:   "Red",
})

//treeEnum is the enum.Enum for tree
var treeEnum = enums.MustAddTree("tree", map[int]string{
	tree:      "",
	treeBlue:  "Blue",
	treeGreen: "Green",
	treeRed:   "Red",
}, map[int]int{
	tree:      tree,
	treeBlue:  tree,
	treeGreen: tree,
	treeRed:   tree,
})

//blamEnum is the enum.Enum for blam
var blamEnum = enums.MustAddTree("blam", map[int]string{
	blam:          "",
	blamOne:       "One",
	blamOne010One: "One",
	blamOne010Two: "Two",
	blamThree:     "Three",
	blamTwo:       "Two",
	blamTwo010One: "One",
}, map[int]int{
	blam:          blam,
	blamOne:       blam,
	blamOne010One: blamOne,
	blamOne010Two: blamOne,
	blamThree:     blam,
	blamTwo:       blam,
	blamTwo010One: blamTwo,
})

//PublicEnum is the enum.Enum for Public
var PublicEnum = enums.MustAdd("Public", map[int]string{
	PublicBlue:  "Blue",
	PublicGreen: "Green",
})

//exampleEnum is the enum.Enum for example
var exampleEnum = enums.MustAddTree("example", map[int]string{
	example:          "",
	exampleOne:       "One",
	exampleOne010Two: "Two",
	exampleOneOne:    "One",
	exampleTwo:       "Two",
}, map[int]int{
	example:          example,
	exampleOne:       example,
	exampleOne010Two: exampleOne,
	exampleOneOne:    exampleOne,
	exampleTwo:       example,
})

//Implicitly created constants for multiWordTree
const (
	multiWordTreeBlueGreenOne = iota - 9223372036854775808
	multiWordTreeBlueGreenThree
)

//multiWordTreeEnum is the enum.Enum for multiWordTree
var multiWordTreeEnum = enums.MustAddTree("multiWordTree", map[int]string{
	multiWordTree:                   "",
	multiWordTreeBlueGreen:          "Blue Green",
	multiWordTreeBlueGreenOne:       "One",
	multiWordTreeBlueGreenOneA:      "A",
	multiWordTreeBlueGreenOneB:      "B",
	multiWordTreeBlueGreenThree:     "Three",
	multiWordTreeBlueGreenThree010A: "A",
	multiWordTreeBlueGreenTwoA:      "Two A",
}, map[int]int{
	multiWordTree:                   multiWordTree,
	multiWordTreeBlueGreen:          multiWordTree,
	multiWordTreeBlueGreenOne:       multiWordTreeBlueGreen,
	multiWordTreeBlueGreenOneA:      multiWordTreeBlueGreenOne,
	multiWordTreeBlueGreenOneB:      multiWordTreeBlueGreenOne,
	multiWordTreeBlueGreenThree:     multiWordTreeBlueGreen,
	multiWordTreeBlueGreenThree010A: multiWordTreeBlueGreenThree,
	multiWordTreeBlueGreenTwoA:      multiWordTreeBlueGreen,
})

//Implicitly created constants for skipNode
const (
	skipNodeRed = iota - 9223372036854775808
)

//skipNodeEnum is the enum.Enum for skipNode
var skipNodeEnum = enums.MustAddTree("skipNode", map[int]string{
	skipNode:             "",
	skipNodeRed:          "Red",
	skipNodeRed010Circle: "Circle",
}, map[int]int{
	skipNode:             skipNode,
	skipNodeRed:          skipNode,
	skipNodeRed010Circle: skipNodeRed,
})

//prefixBugEnum is the enum.Enum for prefixBug
var prefixBugEnum = enums.MustAdd("prefixBug", map[int]string{
	prefixBugGreenprefixBug: "Greenprefix Bug",
	prefixBugWhite:          "White",
})

//blargEnum is the enum.Enum for blarg
var blargEnum = enums.MustAdd("blarg", map[int]string{
	blargA: "A",
	blargB: "B",
})

//flargEnum is the enum.Enum for flarg
var flargEnum = enums.MustAdd("flarg", map[int]string{
	flargC: "C",
	flargD: "D",
})

//blargoEnum is the enum.Enum for blargo
var blargoEnum = enums.MustAdd("blargo", map[int]string{
	blargoA: "A",
	blargoB: "B",
})

//flargoEnum is the enum.Enum for flargo
var flargoEnum = enums.MustAdd("flargo", map[int]string{
	flargoC: "C",
	flargoD: "D",
})

//groupEnum is the combined enum.Enum for group. It also includes boardgame.BaseGroupEnum.
var groupEnum = enums.MustCombine("group", boardgame.BaseGroupEnum, blargoEnum, flargoEnum)

//theGroupEnum is the combined enum.Enum for theGroup
var theGroupEnum = enums.MustCombine("theGroup", blargEnum, flargEnum)
