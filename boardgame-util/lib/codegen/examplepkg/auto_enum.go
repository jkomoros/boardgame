/************************************
 *
 * This file contains auto-generated methods to help configure enums.
 * It was generated by the codegen package via 'boardgame-util codegen'.
 *
 * DO NOT EDIT by hand.
 *
 ************************************/

package examplepkg

import (
	"github.com/jkomoros/boardgame/enum"
)

var enums = enum.NewSet()

//ConfigureEnums simply returns enums, the auto-generated Enums variable. This
//is output because gameDelegate appears to be a struct that implements
//boardgame.GameDelegate, and does not already have a ConfigureEnums
//explicitly defined.
func (g *gameDelegate) ConfigureEnums() *enum.Set {
	return enums
}

//ConfigureEnums simply returns enums, the auto-generated Enums variable. This
//is output because secondGameDelegate appears to be a struct that implements
//boardgame.GameDelegate, and does not already have a ConfigureEnums
//explicitly defined.
func (s *secondGameDelegate) ConfigureEnums() *enum.Set {
	return enums
}

var colorEnum = enums.MustAdd("color", map[int]string{
	colorBlue:    "Blue",
	colorGreen:   "Green",
	colorRed:     "Red",
	colorUnknown: "Unknown",
})

var phaseEnum = enums.MustAdd("phase", map[int]string{
	phaseMultiWord:    "Multi Word",
	phaseUnknown:      "Unknown",
	phaseVeryLongName: "Very Long Name",
})

var fooEnum = enums.MustAdd("foo", map[int]string{
	fooBlue:           "Blue",
	fooOverride:       "Green",
	fooOverrideBlank:  "",
	fooOverrideQuoted: "My name is \"Blue\"",
})

var transformExampleEnum = enums.MustAdd("transformExample", map[int]string{
	transformExampleLowerCase:                 "lower case",
	transformExampleNormalConfiguredTransform: "Normal Configured Transform",
	transformExampleNormalTransform:           "Normal Transform",
	transformExampleUpperCase:                 "UPPER CASE",
})

var defaultTransformEnum = enums.MustAdd("defaultTransform", map[int]string{
	defaultTransformBlue:  "BLUE",
	defaultTransformGreen: "GREEN",
	defaultTransformRed:   "Red",
})

var treeEnum = enums.MustAddTree("tree", map[int]string{
	tree:      "",
	treeBlue:  "Blue",
	treeGreen: "Green",
	treeRed:   "Red",
}, map[int]int{
	tree:      tree,
	treeBlue:  tree,
	treeGreen: tree,
	treeRed:   tree,
})

var blamEnum = enums.MustAddTree("blam", map[int]string{
	blam:        "",
	blamOne:     "One",
	blamOne_One: "One",
	blamOne_Two: "Two",
	blamThree:   "Three",
	blamTwo:     "Two",
	blamTwo_One: "One",
}, map[int]int{
	blam:        blam,
	blamOne:     blam,
	blamOne_One: blamOne,
	blamOne_Two: blamOne,
	blamThree:   blam,
	blamTwo:     blam,
	blamTwo_One: blamTwo,
})

var exampleEnum = enums.MustAddTree("example", map[int]string{
	example:        "",
	exampleOne:     "One",
	exampleOneOne:  "One",
	exampleOne_Two: "Two",
	exampleTwo:     "Two",
}, map[int]int{
	example:        example,
	exampleOne:     example,
	exampleOneOne:  exampleOne,
	exampleOne_Two: exampleOne,
	exampleTwo:     example,
})

//Implicitly created constants for multiWordTree
const (
	multiWordTreeBlueGreenOne = iota - 9223372036854775808
	multiWordTreeBlueGreenThree
)

var multiWordTreeEnum = enums.MustAddTree("multiWordTree", map[int]string{
	multiWordTree:                 "",
	multiWordTreeBlueGreen:        "Blue Green",
	multiWordTreeBlueGreenOne:     "One",
	multiWordTreeBlueGreenOneA:    "A",
	multiWordTreeBlueGreenOneB:    "B",
	multiWordTreeBlueGreenThree:   "Three",
	multiWordTreeBlueGreenThree_A: "A",
	multiWordTreeBlueGreenTwoA:    "Two A",
}, map[int]int{
	multiWordTree:                 multiWordTree,
	multiWordTreeBlueGreen:        multiWordTree,
	multiWordTreeBlueGreenOne:     multiWordTreeBlueGreen,
	multiWordTreeBlueGreenOneA:    multiWordTreeBlueGreenOne,
	multiWordTreeBlueGreenOneB:    multiWordTreeBlueGreenOne,
	multiWordTreeBlueGreenThree:   multiWordTreeBlueGreen,
	multiWordTreeBlueGreenThree_A: multiWordTreeBlueGreenThree,
	multiWordTreeBlueGreenTwoA:    multiWordTreeBlueGreen,
})

//Implicitly created constants for skipNode
const (
	skipNodeRed = iota - 9223372036854775808
)

var skipNodeEnum = enums.MustAddTree("skipNode", map[int]string{
	skipNode:           "",
	skipNodeRed:        "Red",
	skipNodeRed_Circle: "Circle",
}, map[int]int{
	skipNode:           skipNode,
	skipNodeRed:        skipNode,
	skipNodeRed_Circle: skipNodeRed,
})

var prefixBugEnum = enums.MustAdd("prefixBug", map[int]string{
	prefixBugGreenprefixBug: "Greenprefix Bug",
	prefixBugWhite:          "White",
})
